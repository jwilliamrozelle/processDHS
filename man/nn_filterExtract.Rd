% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nn_filterExtract.R
\name{nn_filterExtract}
\alias{nn_filterExtract}
\title{Nearest Neighbor Filtering and Extraction}
\usage{
nn_filterExtract(
  point_sf,
  filterVar = NULL,
  filterValue = NULL,
  extractColumn,
  y_dedup = T
)
}
\arguments{
\item{point_sf}{A spatial data frame containing point data.}

\item{filterVar}{A string indicating the column name in point_sf used for filtering.
If NULL, no filtering is applied based on variable values.}

\item{filterValue}{A value (or vector of values) used for filtering the points
in the column specified by filterVar. If NULL, no filtering
is applied based on variable values.}

\item{extractColumn}{A string indicating the column name from which data is
extracted once the nearest neighbor is determined.}
}
\value{
A vector extracted from the nearest neighbors' specified column after
        applying the filtering conditions.
}
\description{
This function applies a filtering criterion to a spatial data frame (point_sf),
calculates the minimum distances between points, and extracts a specified column
from the nearest neighbors that meet the filtering criteria.
}
\details{
The function first checks if the filterVar and filterValue are provided and valid.
         If they are, it filters the point_sf to include only those points where
         the filterVar matches the filterValue. If no filtering is required or specified,
         it uses all points in point_sf. After filtering, it calculates the distances
         between all points and the filtered points, excludes self-comparisons by setting
         distances from a point to itself as infinity, and identifies the nearest neighbor
         for each point. Finally, it extracts the desired column from these nearest neighbors.
}
\examples{
# Load data (assuming point_sf is already loaded and appropriately formatted)
# nn_filterExtract(point_sf, filterVar = "svc_antenatalCare", filterValue = 1, extractColumn = "typeDHS_category")

}
