% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanFC_jdkSRI.R
\name{cleanFC_jdkSRI}
\alias{cleanFC_jdkSRI}
\title{Clean and Score Facility Capability Data}
\usage{
cleanFC_jdkSRI(FCdata)
}
\arguments{
\item{FCdata}{A data frame containing facility capability data with columns
corresponding to various health facility aspects. It must be
compatible with the `sf` package structure for geometric operations.}
}
\value{
A modified version of `FCdata` which includes several new columns:
        - `sriJDK_basicamenities`: the score for basic amenities,
        - `sriJDK_basicequip`: the score for basic equipment,
        - `sriJDK_infprev`: the score for infection prevention,
        - `sriJDK_med`: the score for essential medicines,
        - `sriJDK_diagcapacity`: the score for diagnostic capacity,
        - `sriJDK_score`: an aggregated score from the above categories,
        - `sriJDK_index`: a standardized index derived from MCA,
        - `sriJDK_index_pct`: percentile ranking of the `sriJDK_index`.
}
\description{
This function processes facility capability data by computing scores based
on several health facility aspects including basic amenities, basic equipment,
infection prevention, essential medicines, and diagnostic capacity.
It also applies multiple correspondence analysis (MCA) to create a standardized
index score.
}
\details{
The function requires the `sf`, `ExPosition`, and `Hmisc` packages.
         It assumes that the necessary variable vectors are stored in the `varVecs`
         dataset from the `processDHS` package. If `varVecs` does not exist in
         the global environment, it attempts to load it. Scores for each category
         are calculated as the mean of selected variables after omitting NA values.
         The overall `sriJDK_score` is computed as the average of these category
         scores. The function finally applies MCA on selected variables, derives
         an index (`sriJDK_index`), and adjusts it if necessary to ensure that
         the correlation with `sriJDK_score` is positive. The index is then
         converted into a percentile ranking.
}
\examples{
# Assuming `FCdata` is your dataset and `varVecs` is loaded:
cleaned_data <- cleanFC_jdkSRI(FCdata)

}
